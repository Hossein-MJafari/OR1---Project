from pulp import LpProblem, LpMaximize, LpVariable, lpSum

# Create the problem
model = LpProblem("Maximize Profit", LpMaximize)

# Define the decision variables with bounds
d = LpVariable.dicts("d", [(i, j) for i in range(1, 13) for j in range(1, 11)], lowBound=0, upBound=60)
x = LpVariable.dicts("X", [(i, j) for i in range(1, 13) for j in range(1, 11)], cat='Binary')

# Define the intermediate variables y
y = {(i, j): x[i, j] * d[i, j] for i in range(1, 13) for j in range(1, 11)}

# Define the intermediate variables z (for the objective function)
z_coefficients = [
    (40, -14, -2, -2.5, -1, -1.5, -0.5), (40, -14, -2.5, -2.5, -1, -1.5, -0.5), (40, -14, -2, -2.5, -1), (40, -14, -3, -2.5),
    (40, -14, -2, -1.5, -0.5), (40, -14, -1.5, -1), (40, -14, -1, 0), (40, -14, -3, -1), (40, -14, -1, -1), (40, -14, -1.5, -1.5, -0.5),
    (56, -10, -2, -2.5, -1, -1.5, -0.5), (56, -10, -2.5, -2.5, -1, -1.5, -0.5), (56, -10, -2, -2.5, -1), (56, -10, -3, -2.5),
    (56, -10, -2, -1.5, -0.5), (56, -10, -1.5, -1), (56, -10, -1, 0), (56, -10, -3, -1), (56, -10, -1, -1), (56, -10, -1.5, -1.5, -0.5),
    (50, -20, -2, -2.5, -1, -1.5, -0.5), (50, -20, -2.5, -2.5, -1, -1.5, -0.5), (50, -20, -2, -2.5, -1), (50, -20, -3, -2.5),
    (50, -20, -2, -1.5, -0.5), (50, -20, -1.5, -1), (50, -20, -1, 0), (50, -20, -3, -1), (50, -20, -1, -1), (50, -20, -1.5, -1.5, -0.5),
    (48, -12, -2, -2.5, -1, -1.5, -0.5), (48, -12, -2.5, -2.5, -1, -1.5, -0.5), (48, -12, -2, -2.5, -1), (48, -12, -3, -2.5),
    (48, -12, -2, -1.5, -0.5), (48, -12, -1.5, -1), (48, -12, -1, 0), (48, -12, -3, -1), (48, -12, -1, -1), (48, -12, -1.5, -1.5, -0.5),
    (48, -10, -2, -2.5, -1, -1.5, -0.5), (48, -10, -2.5, -2.5, -1, -1.5, -0.5), (48, -10, -2, -2.5, -1), (48, -10, -3, -2.5),
    (48, -10, -2, -1.5, -0.5), (48, -10, -1.5, -1), (48, -10, -1, 0), (48, -10, -3, -1), (48, -10, -1, -1), (48, -10, -1.5, -1.5, -0.5),
    (42, -14, -2, -2.5, -1, -1.5, -0.5), (42, -14, -2.5, -2.5, -1, -1.5, -0.5), (42, -14, -2, -2.5, -1), (42, -14, -3, -2.5),
    (42, -14, -2, -1.5, -0.5), (42, -14, -1.5, -1), (42, -14, -1, 0), (42, -14, -3, -1), (42, -14, -1, -1), (42, -14, -1.5, -1.5, -0.5),
    (48, -16, -2, -2.5, -1, -1.5, -0.5), (48, -16, -2.5, -2.5, -1, -1.5, -0.5), (48, -16, -2, -2.5, -1), (48, -16, -3, -2.5),
    (48, -16, -2, -1.5, -0.5), (48, -16, -1.5, -1), (48, -16, -1, 0), (48, -16, -3, -1), (48, -16, -1, -1), (48, -16, -1.5, -1.5, -0.5),
    (50, -18, -2, -2.5, -1, -1.5, -0.5), (50, -18, -2.5, -2.5, -1, -1.5, -0.5), (50, -18, -2, -2.5, -1), (50, -18, -3, -2.5),
    (50, -18, -2, -1.5, -0.5), (50, -18, -1.5, -1), (50, -18, -1, 0), (50, -18, -3, -1), (50, -18, -1, -1), (50, -18, -1.5, -1.5, -0.5),
    (40, -18, -2, -2.5, -1, -1.5, -0.5), (40, -18, -2.5, -2.5, -1, -1.5, -0.5), (40, -18, -2, -2.5, -1), (40, -18, -3, -2.5),
    (40, -18, -2, -1.5, -0.5), (40, -18, -1.5, -1), (40, -18, -1, 0), (40, -18, -3, -1), (40, -18, -1, -1), (50, -18, -1.5, -1.5, -0.5),
    (50, -18, -2, -2.5, -1, -1.5, -0.5), (50, -18, -2.5, -2.5, -1, -1.5, -0.5), (50, -18, -2, -2.5, -1), (50, -18, -3, -2.5),
    (50, -18, -2, -1.5, -0.5), (50, -18, -1.5, -1), (50, -18, -1, 0), (50, -18, -3, -1), (50, -18, -1, -1), (50, -18, -1.5, -1.5, -0.5),
    (60, -14, -2, -2.5, -1, -1.5, -0.5), (60, -14, -2.5, -2.5, -1, -1.5, -0.5), (60, -14, -2, -2.5, -1), (60, -14, -3, -2.5),
    (60, -14, -2, -1.5, -0.5), (60, -14, -1.5, -1), (60, -14, -1, 0), (60, -14, -3, -1), (60, -14, -1, -1), (60, -14, -1.5, -1.5, -0.5)
]

z = {}
for i in range(1, 13):
    for j in range(1, 11):
        z[(i, j)] = lpSum([z_coefficients[i-1][k] * y[(i, j)] ** k for k in range(len(z_coefficients[i-1]))])

# Define the constraints
for j in range(1, 11):
    model += lpSum(x[(i, j)] for i in range(1, 13)) == 1

for i in range(1, 13):
    for j in range(1, 11):
        model += y[(i, j)] <= 60 * x[(i, j)]

# Set the objective
model += lpSum(z[(i, j)] for i in range(1, 13) for j in range(1, 11))

# Solve the problem
model.solve()
